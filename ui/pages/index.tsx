import { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { getKeplrFromWindow } from "@keplr-wallet/stores";
import type { NextPage } from "next";
import Head from "next/head";
import { DependencyList, useEffect, useState } from "react";
import { PlusIcon } from "../public/icons/PlusIcon";

type Thread = {
  id: number;
  title: string;
  description: string;
  content: string[];
};

type HeaderProps = {
  threads: { title: string; id: string }[];
};

const HeaderView = ({ threads }: HeaderProps) => {
  return (
    <div className="flex">
      <div className="absolute -mx-16">
        <div className="h-10 w-10 bg-cta rounded-full cursor-pointer flex items-center justify-center hover:opacity-80">
          <PlusIcon width={24} height={24} strokeWidth={2} />
        </div>
      </div>
      {threads.map((t, i) => (
        <div
          key={i}
          className="text-xl font-bold text-primary cursor-pointer hover:opacity-80 max-w-[140px] hover:underline"
        >
          {t.title}
        </div>
      ))}
    </div>
  );
};

type Storyline = {
  title: string;
  description: string;
  content: Block[];
};

// Would be cool to do rich text but that's going
// to be harder
type Block = string;

const StorylineView = ({ storyline }: { storyline?: Storyline }) => {
  if (!storyline) return <div></div>;

  const { title, description, content: blocks } = storyline;
  return (
    <div className="max-w-md">
      <div className="py-4">
        <p className="text-primary text-2xl font-bold">{title}</p>
        <p className="text-secondary text-xl">{description}</p>
      </div>
      <div>
        {blocks.map((block, i) => (
          <div key={i} className="relative py-2">
            <div className="pb-1 leading-relaxed">{block}</div>
          </div>
        ))}
      </div>
    </div>
  );
};

const onConnectWalletClick = async () => {
  const keplr = await getKeplrFromWindow();
  if (!keplr)
    return alert("Connect wallet failed. Download Keplr wallet to continue");

  await keplr.enable(CHAIN_ID);
};

// MARK: Environmental variables

// This changes for everyone's local Docker env
const FLOOB_ADDR =
  "juno1y8tagmy897u5z4lx4dv36sy84rhyhqqgwcghxuj7pqjnzlxkgj3s3jcm32";
const CHAIN_ID = "testing";
const RPC_HOST = "http://localhost";
const RPC_PORT = "26657";

// MARK: Smart contract Queries
const getThreadData = async ({
  id,
  client,
}: {
  id: number;
  client: CosmWasmClient;
}) => {
  const thread = await client.queryContractSmart(FLOOB_ADDR, {
    get_thread: { id },
  });
  return thread as Thread;
};

const getThreads = async ({ client }: { client: CosmWasmClient }) => {
  const threads = await client.queryContractSmart(FLOOB_ADDR, {
    get_threads_created: {},
  });
  return threads;
};

// MARK: Hooks
export const useAwaited = <T,>(f: () => Promise<T>, deps: DependencyList) => {
  const [res, setRes] = useState<T>();
  useEffect(() => {
    (async () => {
      setRes(await f());
    })();
  }, deps);

  return res;
};

// MARK: View
const Home: NextPage = () => {
  const [threadId, setThreadId] = useState(0);
  const threads = useAwaited(async () => {
    const client = await CosmWasmClient.connect(RPC_HOST + ":" + RPC_PORT);
    const threads = await getThreads({ client });
    console.log(threads);
    return threads;
  }, []);
  const displayedThread = useAwaited(async () => {
    const client = await CosmWasmClient.connect(RPC_HOST + ":" + RPC_PORT);
    const thread = await getThreadData({ id: threadId, client });
    console.log(thread);
    return thread;
  }, [threadId]);

  return (
    <div>
      <Head>
        <title>Floob DAO</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="py-2">
        <div className="w-full flex items-center justify-center">
          <div className="flex flex-col">
            <div className="flex py-12">
              <div>
                <HeaderView threads={threads || []} />
              </div>
            </div>
            <StorylineView storyline={displayedThread} />
            {/* Add new sub-thread */}
            <div className="py-4 relative">
              {/* Input component. Invisible for now */}
              <div className="bg-[#1E1E1E] rounded-md invisible">
                <textarea
                  cols={40}
                  rows={2}
                  placeholder="New subthread story..."
                  className="w-full bg-[#1E1E1E] rounded-sm px-6 py-4 outline-none"
                />
                <div className="px-6 py-4">
                  <input
                    type="button"
                    value="Post"
                    className="text-cta text-sm font-semibold rounded-sm outline-none cursor-pointer hover:opacity-80"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div className="py-24"></div>
    </div>
  );
};

export default Home;
