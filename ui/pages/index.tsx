import { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { getKeplrFromWindow } from "@keplr-wallet/stores";
import type { NextPage } from "next";
import { FC } from "react";
import Head from "next/head";
import clsx from "clsx";
import {
  CHAIN_ID,
  useAwaited,
  RPC_HOST,
  RPC_PORT,
  getThreads,
} from "../lib/io";
import { useRouter } from "next/router";

export type Thread = {
  id: number;
  title: string;
  description: string;
  content: string[];
};

type HeaderProps = {
  titles: string[];
  onHeaderClick: (headIdx: number) => void;
  selected?: number;
};

const Link = ({ href, children }: { href: string; children: string }) => (
  <a
    href={href}
    target="_blank"
    rel="noreferrer"
    className={clsx(
      "opacity-60 transition-opacity 100ms ease-in-out",
      "hover:opacity-100"
    )}
  >
    {children}
  </a>
);

const WhatIsFloobZone = () => (
  <div className="flex flex-col gap-2">
    <h1 className="text-primary text-2xl font-bold">What is Floob.zone?</h1>
    <p>
      Floob is a community-driven, decentralized, and{" "}
      <Link href="https://github.com/baoskee/floob-dao">open-source</Link>{" "}
      story-telling smart contract application controlled by{" "}
      <Link href="https://daodao.zone/dao/juno15aka2ufg4xg6et76q3dg95q798eusphft0yuddl764kc2wfkxaxs43r32f#proposals">
        FloobDAO
      </Link>
      .
    </p>
    <p>
      Members can propose and vote on new stories and sub-stories to be
      immortalized on-chain forever. The stories on this website are generated
      from a smart contract on Juno mainnet.
    </p>
    <p>
      The FloobDAO token holders can vote on the direction of the story,
      evolving the Floob universe to their liking.
    </p>
    <p>
      You can read the first story,{" "}
      <Link href="https://floob.zone?id=0">{"How Floob came to power"}</Link>.
    </p>
    <p>
      This project is created and maintained by{" "}
      <Link href="https://twitter.com/baoskee">baoskee</Link>. It is intended to
      be a fun and educational project personally, and an experiment in
      decentralized story-telling for the Juno community. Never buy FLOOB, just
      ask and we will mint.
    </p>

    <p className="py-2" />

    <h1 className="text-primary text-2xl font-bold">What is FloobDAO?</h1>
    <p>
      FloobDAO is a <Link href="https://daodao.zone">DaoDao</Link> DAO that is
      governed by FloobDAO token holders. FloobDAO token holders can create and
      edit stories around the Galactic Floob storyline by creating a proposal
      and getting it passed.
    </p>
  </div>
);

export const HeaderView: FC<HeaderProps> = ({
  titles,
  selected,
  onHeaderClick,
}) => {
  return (
    <div className="top-0 left-0 w-screen flex px-8 py-4 bg-black overflow-x-scroll max-h-fit">
      <div className="flex flex-row gap-8 items-baseline text-sm font-medium">
        {titles.map((t, i) => (
          <div
            key={i}
            onClick={() => onHeaderClick(i)}
            className={clsx(
              "text-sm text-primary cursor-pointer",
              "opacity-50 hover:opacity-100 transition-opacity 100ms ease-in-out whitespace-nowrap",
              selected == i && "opacity-100"
            )}
          >
            {t}
          </div>
        ))}
      </div>
    </div>
  );
};

const onConnectWalletClick = async () => {
  const keplr = await getKeplrFromWindow();
  if (!keplr)
    return alert("Connect wallet failed. Download Keplr wallet to continue");

  await keplr.enable(CHAIN_ID);
};

export const PageView: FC = ({ children }) => {
  const threads = useAwaited(async () => {
    const client = await CosmWasmClient.connect(RPC_HOST + ":" + RPC_PORT);
    const threads = await getThreads({ client });
    return threads as Thread[];
  }, []);
  const router = useRouter();
  const id = router.query.id ? parseInt(router.query.id as string) : undefined;

  return (
    <div>
      <Head>
        <title>Floob DAO</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <HeaderView
        titles={
          threads
            ? [
                "What is Floob.zone and FloobDAO?",
                ...threads.map((t) => t.title),
              ]
            : ["What is Floob.zone and FloobDAO?"]
        }
        selected={id != undefined ? id + 1 : 0}
        onHeaderClick={(i) => i == 0 ? router.push('/') : router.push(`/stories/${i - 1}`)}
      />
      <div className="py-12">
        <div className="w-full flex items-center justify-center">
          <div className="flex flex-col">
            <div className="max-w-lg px-8">{children}</div>
          </div>
        </div>
      </div>
      <div className="py-24"></div>
    </div>
  );
};

// MARK: View
const Home: NextPage = () => {
  return (
    <PageView>
      <WhatIsFloobZone />
    </PageView>
  );
};

export default Home;
